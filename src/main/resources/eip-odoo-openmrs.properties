# *********************** OAuth2 Configuration ********************************************************************
# Enabled Oauth when set to true, defaults to false.
oauth.enabled=${OAUTH_ENABLED:false}

# The client Id of the account, defaults to empty.
oauth.access.token.uri=${OAUTH_ACCESS_TOKEN_URL:}

# The client Id of the account to use to authenticate, defaults to empty.
oauth.client.id=${OAUTH_CLIENT_ID:}

# The client secret of the account to use to authenticate, defaults to empty.
oauth.client.secret=${OAUTH_CLIENT_SECRET:}

# Authentication scope, can be multiple values separated by commas, defaults to empty.
oauth.client.scope=${OAUTH_CLIENT_SCOPE:}
# ----------------------------------------------------------------------------------------------------------------------

# *********************** Odoo configuration **************************************************************************
#
# The base URL to the Odoo instance
odoo.baseUrl=${ODOO_URL}

# The database name to use to log into the Odoo instance
odoo.database=${ODOO_DATABASE}

# The username for the account to use to log into the Odoo instance
odoo.username=${ODOO_USER}

# The password for the account to use to log into the Odoo instance
odoo.password=${ODOO_PASSWORD}

# The address type to use for customer addresses in Odoo
odoo.customer.address.type=contact

odoo.handler.route=odoo-order-handler

# Custom table to OpenMRS REST resource name mappings
odoo.custom.table.resource.mappings=orders:order,test_order:order,drug_order:order

# Custom property for the res.partner model in odoo
odoo.emr.id.field=${ODOO_CUSTOMER_EXTERNAL_ID}

# Custom property for the res.partner model in odoo to capture customer's date of birth
odoo.dob.field=${ODOO_CUSTOMER_DOB_FIELD}

# Custom property for the res.partner model in odoo to capture customer's weight
odoo.weight.field=${ODOO_CUSTOMER_WEIGHT_FIELD}

# Used to turn on or off the route that allows to sync extra patient details like weight and/or date of birth
odoo.enable.extra.customer.details.route=${ODOO_ENABLE_EXTRA_CUSTOMER_FIELDS_ROUTE}

# Used to turn on or off the route that allows to sync extra patient details like weight as part of the customer quotation
odoo.enable.extra.quotation.details.route=${ODOO_ENABLE_EXTRA_QUOTATION_FIELDS_ROUTE}

# Camel route to be invoked via the direct component via the direct component to process obs events to manage resources
# in odoo
obs.to.odoo.resource.handler.route=obs-to-customer

# Comma-separated list of Obs question and answer mappings, note that you can provider multiple answers separated by a
# charet(^) character, questions and answers are separated by a colon e.g. obs-qn-1:obs-ans-a^obs-ans-b:obs-qn-2,true
odoo.obs.concept.question.answer.mappings=

# Camel endpoint to be called when processing an obs event to decide if the associated patient should be added to odoo
# or not
obs.to.customer.decision.rule.endpoint=
# ----------------------------------------------------------------------------------------------------------------------

# *********************** Configuration of the OpenMRS Web App *********************************************************
#
# OpenMRS user credentials
openmrs.username=${OPENMRS_USER}

openmrs.password=${OPENMRS_PASSWORD}

# OpenMRS base url
openmrs.baseUrl=${OPENMRS_URL}

# The results encounter type for all patient result observations
results.encounterType.uuid=${OPENMRS_RESULTS_ENCOUNTER_TYPE_UUID}

concept.complex.uuid=${OPENMRS_CONCEPT_COMPLEX_UUID}

openmrs.identifier.type.uuid=${OPENMRS_IDENTIFIER_TYPE_UUD}

# true/false flag to indicate whether to create a new customer in Odoo if it does not exist
create.customer.if.not.exist=${CREATE_CUSTOMER_IF_NOT_EXIST}

# UUID for concept that is used to record a patient's weight. It is usually 5089AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
emr.weight.concept=${EMR_WEIGHT_CONCEPT}
# ----------------------------------------------------------------------------------------------------------------------
